
<EditForm Model="@Id" OnValidSubmit="Excluir">
    <MudGrid>
        <MudItem>
            <MudText Typo="Typo.body2">
                <b>Você tem certeza que deseja excluir o registro?</b>
            </MudText>
        </MudItem>
        <!--Botão Salvar-->
        <MudItem xs="6">
            <MudButton OnClick="Cancelar" Variant="Variant.Filled" Color="Color.Secondary" FullWidth="true">Cancelar</MudButton>
        </MudItem>
        <MudItem xs="6">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">Excluir</MudButton>
        </MudItem>
    </MudGrid>
</EditForm>

@code{
    [Parameter] public int Id { get; set; }

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    private async Task<ExibirUsuario> ObterUsuarioLogadoNoSistema()
    {
        return await localStorage.GetItemAsync<ExibirUsuario>("usuario");
    }

    private async Task<EditarRegistro> ObterRegistroPeloId(ExibirUsuario usuarioLogado)
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:44343/api/v1/Registro/buscar-registro/" + Id);
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", usuarioLogado.Token);
        var response = await httpClient.SendAsync(request);

        var registroEncontrado = JsonSerializer.Deserialize<EditarRegistro>
        (
            await response.Content.ReadAsStringAsync(),
            new JsonSerializerOptions { PropertyNameCaseInsensitive = true, Converters = { new TimeSpanJsonConverter() } }
        );

        return registroEncontrado;
    }

    private async Task Excluir()
    {
        var usuarioLogado = await ObterUsuarioLogadoNoSistema();

        var registroEncontrado = await ObterRegistroPeloId(usuarioLogado);

        registroEncontrado.Excluido = true;

        var request = new HttpRequestMessage(HttpMethod.Put, "https://localhost:44343/api/v1/Registro/alterar-registro/" + Id);
        request.Content = new StringContent(JsonSerializer.Serialize(registroEncontrado, new JsonSerializerOptions { Converters = { new TimeSpanJsonConverter() } }), Encoding.UTF8, "application/json");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", usuarioLogado.Token);
        var response = await httpClient.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            await ModalInstance.CloseAsync();
        }
        else
        {
            snackbar.Add("O Registro não foi excluído", Severity.Error);
        }
    }

    private void Cancelar() => ModalInstance.CancelAsync();
}