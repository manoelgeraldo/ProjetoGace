@page "/SIMIP/registros-excluidos"
@attribute [Authorize]


<MudContainer Class="mt-16 px-8">
    <MudGrid>
        <!--Gráfico 01-->
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 250px;">
                <MudChart ChartType="ChartType.Bar"  ChartSeries="@DadosComparativosEntreTentativaEConsumado" XAxisLabels="@LabelMesesGraficos" Width="100%" Height="100%"></MudChart>
            </MudPaper>
        </MudItem>
        <!--Gráfico 02-->
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 250px;">
                <MudChart ChartType="ChartType.Line" ChartSeries="@DadosComparativosEntreTentativaEConsumado" XAxisLabels="@LabelMesesGraficos" Width="100%" Height="100%"></MudChart>
            </MudPaper>
        </MudItem>
        <!--Gráfico 03-->
        <MudItem xs="12" sm="12" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 250px;">
                <MudChart ChartType="ChartType.Donut" Width="50%" Height="50%" InputData="@DadosComparativoStatusRegistro" InputLabels="@labelGraficoStatusRegistro"></MudChart>
            </MudPaper>
        </MudItem>
        <!--Tabela de Registros-->
        <MudItem xs="12">
            <MudPaper Class="pa-2 mx-2" Elevation="0">
                <MudTable ServerData="@(new Func<TableState, Task<TableData<ExibirRegistro>>>(ServerReload))"
                    Dense="true" Hover="true" @ref="table" FixedHeader="true" Height="400px" Striped="true" HorizontalScrollbar="true">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Lista de Registros</MudText>
                        <MudSpacer />
                        <MudTextField T="string"
                                      ValueChanged="@(s => OnProcurar(s))"
                                      Placeholder="Procurar"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Search"
                                      IconSize="Size.Medium"
                                      Class="mt-0 pb-2" Clearable="true">
                        </MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh></MudTh>
                        <MudTh Style="text-align:center"><MudTableSortLabel SortLabel="id" T="ExibirRegistro">Id</MudTableSortLabel></MudTh>
                        <MudTh Style="text-align:center"><MudTableSortLabel SortLabel="tipoDeRegistro" T="ExibirRegistro">Tipo</MudTableSortLabel></MudTh>
                        <MudTh Style="text-align:center"><MudTableSortLabel SortLabel="boe" T="ExibirRegistro">Nº BOE</MudTableSortLabel></MudTh>
                        <MudTh Style="text-align:center"><MudTableSortLabel SortLabel="dataRegistro" T="ExibirRegistro">Data</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortLabel="fato" T="ExibirRegistro">Município</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortLabel="statusRegistro" T="ExibirRegistro">Status</MudTableSortLabel></MudTh>
                        <MudTh Style="text-align:center">Ações</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="">
                            <MudIcon Icon="@context.Icon" @onclick="@(()=> ExibirEnvolvidoEMudarIcon(@context.Id))"/>
                        </MudTd>
                        <MudTd DataLabel="Id">@context.Id</MudTd>
                        <MudTd DataLabel="Tipo">
                            @if(@context.TipoDeRegistro == "TENTATIVA")
                            {
                                <MudChip Style="background-color: #2979FF">@context.TipoDeRegistro</MudChip>
                            }
                            else
                            {
                                <MudChip Style="background-color: #1DE9B6">@context.TipoDeRegistro</MudChip>   
                            }
                        </MudTd>
                        <MudTd DataLabel="Nº BOE">@context.BOE</MudTd>
                        <MudTd DataLabel="Data">@context.DataRegistroBOE.Value.ToString("d")</MudTd>
                        <MudTd DataLabel="Município">@(context.Fato == null ? "N/A" : context.Fato.MunicipioFato)</MudTd>
                        <MudTd DataLabel="Status">
                            @if (!@context.StatusRegistro)
                            {
                                <MudAvatar Size="Size.Small" Style="background-color: #1DE9B6" />
                            }
                            else
                            {
                                <MudAvatar Size="Size.Small" Style="background-color: #2979FF" />
                            }
                        </MudTd>
                        <MudTd DataLabel="Ações">
                            <MudTooltip Placement="Placement.Left">
                                <ChildContent>
                                    <MudIconButton Icon="@Icons.Material.Filled.Info"/>
                                </ChildContent>
                                <TooltipContent>
                                    <MudText Typo="Typo.caption">
                                        Registrado em: 
                                    </MudText>
                                    <MudDivider DividerType="DividerType.FullWidth"/>
                                    <MudText Typo="Typo.body2">@context.DataLancamento</MudText>
                                    <MudDivider DividerType="DividerType.FullWidth"/>
                                    <MudText Typo="Typo.caption">
                                        Atualizado em: 
                                    </MudText>
                                    <MudDivider DividerType="DividerType.FullWidth"/>
                                    <MudText Typo="Typo.body2">@context.DataAtualizacao</MudText>
                                    <MudDivider DividerType="DividerType.FullWidth"/>
                                    <MudText Typo="Typo.caption">
                                        Último usuário: 
                                    </MudText>
                                    <MudDivider DividerType="DividerType.FullWidth"/>
                                    <MudText Typo="Typo.body2">@context.UsuarioRegistro</MudText>
                                </TooltipContent>
                            </MudTooltip>
                            <MudTooltip Text="Editar">
                                <MudIconButton OnClick="@(()=> Editar(context.Id))" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" />
                            </MudTooltip>
                            <MudTooltip Text="Restaurar">
                                <MudIconButton OnClick="@(()=> Excluir(context.Id))" Icon="@Icons.Material.Filled.RestoreFromTrash" Color="Color.Error" />
                            </MudTooltip>
                        </MudTd>
                    </RowTemplate>
                    <ChildRowContent>
                        @if(@context.Exibir)
                        {
                            <td colspan="8">
                                <MudTable Items="@context.Envolvidos" Context="EnvolvidoContext" 
                                   Dense="true" FixedHeader="true" Hover="true">
                                   <ColGroup>
		                                <col />
		                                <col />
		                                <col />
                                        <col />
		                                <col />
		                                <col />
	                                </ColGroup>
	                                <HeaderContent>
		                                <MudTh Style="text-align:center">Nº</MudTh>
		                                <MudTh>Envolvimento</MudTh>
		                                <MudTh>Nome do Envolvido</MudTh>
                                        <MudTh Style="text-align:center">Data de Nascimento</MudTh>
		                                <MudTh Style="text-align:center">Idade</MudTh>
		                                <MudTh>Nome da Mãe</MudTh>
	                                </HeaderContent>
	                                <RowTemplate>
                                        <MudTd DataLabel="Nº" Style="text-align:center">@EnvolvidoContext.SequencialEnvolvido</MudTd>
		                                <MudTd DataLabel="Envolvimento">@EnvolvidoContext.TipoEnvolvido</MudTd>
		                                <MudTd DataLabel="Nome do Envolvido">@EnvolvidoContext.NomeEnvolvido</MudTd>
                                        <MudTd DataLabel="Data de Nascimento" Style="text-align:center">@EnvolvidoContext.DataNascimento.Value.ToString("d")</MudTd>
                                        <MudTd DataLabel="Idade" Style="text-align:center">@EnvolvidoContext.IdadeExata</MudTd>
                                        <MudTd DataLabel="Nome da Mãe">@EnvolvidoContext.NomeGenitora</MudTd>
	                                </RowTemplate>
	                            </MudTable>
                            </td>
                        }
                    </ChildRowContent>
                    <NoRecordsContent>
                        <MudText>Não encontrado!</MudText>
                    </NoRecordsContent>
                    <LoadingContent>
                        <MudText>Carregando...</MudText>
                    </LoadingContent>
                    <PagerContent>
                        <MudTablePager InfoFormat="{first_item}-{last_item} de {all_items}"
                                       RowsPerPageString="Registros por página"
                                       PageSizeOptions="new int[]{5, 10, 15, 20}" />
                    </PagerContent>
                </MudTable>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>


@code {

    [CascadingParameter] public IModalService Modal { get; set; }

    private MudTable<ExibirRegistro> table;
    public IEnumerable<ExibirRegistro> registros;
    private string procurar = null;
    public double[] DadosComparativoStatusRegistro = new double[] { };
    public List<ChartSeries> DadosComparativosEntreTentativaEConsumado = new List<ChartSeries> { };

    private void ExibirEnvolvidoEMudarIcon(int id)
    {
        var icon = registros.FirstOrDefault(x => x.Id == id).Icon;

        if (icon == Icons.Material.Filled.AddCircle)
        {
            registros.FirstOrDefault(x => x.Id == id).Icon = Icons.Material.Filled.ArrowCircleDown;
            registros.FirstOrDefault(x => x.Id == id).Exibir = true;
        }
        else
        {
            registros.FirstOrDefault(x => x.Id == id).Icon = Icons.Material.Filled.AddCircle;
            registros.FirstOrDefault(x => x.Id == id).Exibir = false;
        }
    }

    public async Task<ExibirUsuario> ObterUsuarioLogadoNoSistema()
    {
        return await localStorage.GetItemAsync<ExibirUsuario>("usuario");
    }

    private async Task<IEnumerable<ExibirRegistro>> ObterTodosRegistros(ExibirUsuario usuarioLogado)
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:44343/api/v1/Registro/lista-de-registros");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", usuarioLogado.Token);
        var response = await httpClient.SendAsync(request);

        var registros = JsonSerializer.Deserialize<IEnumerable<ExibirRegistro>>
        (
            await response.Content.ReadAsStringAsync(),
            new JsonSerializerOptions { PropertyNameCaseInsensitive = true, Converters = { new TimeSpanJsonConverter() } }
        );

        return registros.Where(x => x.Excluido == true).OrderByDescending(x=>x.DataRegistroBOE);
    }

    private IEnumerable<ExibirRegistro> Procurar(IEnumerable<ExibirRegistro> registros)
    {
        registros = registros.Where(registro =>
        {
            if (string.IsNullOrWhiteSpace(procurar))
                return true;
            if (registro.TipoDeRegistro.Contains(procurar, StringComparison.OrdinalIgnoreCase))
                return true;
            if (registro.BOE.Contains(procurar, StringComparison.OrdinalIgnoreCase))
                return true;
            if (registro.DataRegistroBOE.ToString().Contains(procurar, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{registro.Id} {registro.Fato.MunicipioFato}".Contains(procurar, StringComparison.OrdinalIgnoreCase))
                return true;
            if (registro.Envolvidos.Where(x => x.NomeEnvolvido.Contains(procurar, StringComparison.OrdinalIgnoreCase)).Any())
                return true;
            return false;
        }).ToArray();

        return registros;
    }

    private async Task<TableData<ExibirRegistro>> ServerReload(TableState state)
    {
        var usuarioLogado = await ObterUsuarioLogadoNoSistema();

        registros = await ObterTodosRegistros(usuarioLogado);

        GerarGraficoStatusRegistro();
        GerarGraficoComparativoTentativaConsumado();
        StateHasChanged();

        //Procurar
        registros = Procurar(registros);

        //Ordenamento
        switch (state.SortLabel)
        {
            case "id":
                registros = registros.OrderByDirection(state.SortDirection, o => o.Id);
                break;
            case "tipoDeRegistro":
                registros = registros.OrderByDirection(state.SortDirection, o => o.TipoDeRegistro);
                break;
            case "boe":
                registros = registros.OrderByDirection(state.SortDirection, o => o.BOE);
                break;
            case "dataRegistro":
                registros = registros.OrderByDirection(state.SortDirection, o => o.DataRegistroBOE);
                break;
            case "statusRegistro":
                registros = registros.OrderByDirection(state.SortDirection, o => o.StatusRegistro);
                break;
            case "fato":
                registros = registros.OrderByDirection(state.SortDirection, o => o.Fato.MunicipioFato);
                break;
            case "envolvido":
                registros = registros.OrderByDirection(state.SortDirection, o => o.Envolvidos);
                break;
        }

        var totalRegistros = registros.Count();
        var pagedData = registros.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<ExibirRegistro>() { TotalItems = totalRegistros, Items = pagedData };
    }

    private void OnProcurar(string text)
    {
        procurar = text;
        table.ReloadServerData();
    }

    void Editar(int id) => navigationManager.NavigateTo($"/SIMIP/alterar-registro/{id}");

    private async Task Excluir(int id)
    {
        var parameters = new ModalParameters();
        parameters.Add("id", id);

        var formModal = Modal.Show<ExcluirRegistro>("Excluir Registro", parameters);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            snackbar.Add("Registro não foi excluído!", Severity.Info);
        }
        else
        {
            snackbar.Add("Registro excluído!", Severity.Success);
            await table.ReloadServerData();
        }
    }

    //Gráfico1-2
    public string[] LabelMesesGraficos = { "Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez" };

    private void GerarGraficoComparativoTentativaConsumado()
    {
        var totalTentativaJaneiro = registros.Where(x => x.DataRegistroBOE.Value.Month == 1).Select(x => x.TipoDeRegistro == "TENTATIVA").Count();
        var totalTentativaFevereiro = registros.Where(x => x.DataRegistroBOE.Value.Month == 2).Select(x => x.TipoDeRegistro == "TENTATIVA").Count();
        var totalTentativaMarco = registros.Where(x => x.DataRegistroBOE.Value.Month == 3).Select(x => x.TipoDeRegistro == "TENTATIVA").Count();
        var totalTentativaAbril = registros.Where(x => x.DataRegistroBOE.Value.Month == 4).Select(x => x.TipoDeRegistro == "TENTATIVA").Count();
        var totalTentativaMaio = registros.Where(x => x.DataRegistroBOE.Value.Month == 5).Select(x => x.TipoDeRegistro == "TENTATIVA").Count();
        var totalTentativaJunho = registros.Where(x => x.DataRegistroBOE.Value.Month == 6).Select(x => x.TipoDeRegistro == "TENTATIVA").Count();
        var totalTentativaJulho = registros.Where(x => x.DataRegistroBOE.Value.Month == 7).Select(x => x.TipoDeRegistro == "TENTATIVA").Count();
        var totalTentativaAgosto = registros.Where(x => x.DataRegistroBOE.Value.Month == 8).Select(x => x.TipoDeRegistro == "TENTATIVA").Count();
        var totalTentativaSetembro = registros.Where(x => x.DataRegistroBOE.Value.Month == 9).Select(x => x.TipoDeRegistro == "TENTATIVA").Count();
        var totalTentativaOutubro = registros.Where(x => x.DataRegistroBOE.Value.Month == 10).Select(x => x.TipoDeRegistro == "TENTATIVA").Count();
        var totalTentativaNovembro = registros.Where(x => x.DataRegistroBOE.Value.Month == 11).Select(x => x.TipoDeRegistro == "TENTATIVA").Count();
        var totalTentativaDezembro = registros.Where(x => x.DataRegistroBOE.Value.Month == 12).Select(x => x.TipoDeRegistro == "TENTATIVA").Count();

        var totalConsumadoJaneiro = registros.Where(x => x.DataRegistroBOE.Value.Month == 1).Select(x => x.TipoDeRegistro == "CONSUMADO").Count();
        var totalConsumadoFevereiro = registros.Where(x => x.DataRegistroBOE.Value.Month == 2).Select(x => x.TipoDeRegistro == "CONSUMADO").Count();
        var totalConsumadoMarco = registros.Where(x => x.DataRegistroBOE.Value.Month == 3).Select(x => x.TipoDeRegistro == "CONSUMADO").Count();
        var totalConsumadoAbril = registros.Where(x => x.DataRegistroBOE.Value.Month == 4).Select(x => x.TipoDeRegistro == "CONSUMADO").Count();
        var totalConsumadoMaio = registros.Where(x => x.DataRegistroBOE.Value.Month == 5).Select(x => x.TipoDeRegistro == "CONSUMADO").Count();
        var totalConsumadoJunho = registros.Where(x => x.DataRegistroBOE.Value.Month == 6).Select(x => x.TipoDeRegistro == "CONSUMADO").Count();
        var totalConsumadoJulho = registros.Where(x => x.DataRegistroBOE.Value.Month == 7).Select(x => x.TipoDeRegistro == "CONSUMADO").Count();
        var totalConsumadoAgosto = registros.Where(x => x.DataRegistroBOE.Value.Month == 8).Select(x => x.TipoDeRegistro == "CONSUMADO").Count();
        var totalConsumadoSetembro = registros.Where(x => x.DataRegistroBOE.Value.Month == 9).Select(x => x.TipoDeRegistro == "CONSUMADO").Count();
        var totalConsumadoOutubro = registros.Where(x => x.DataRegistroBOE.Value.Month == 10).Select(x => x.TipoDeRegistro == "CONSUMADO").Count();
        var totalConsumadoNovembro = registros.Where(x => x.DataRegistroBOE.Value.Month == 11).Select(x => x.TipoDeRegistro == "CONSUMADO").Count();
        var totalConsumadoDezembro = registros.Where(x => x.DataRegistroBOE.Value.Month == 12).Select(x => x.TipoDeRegistro == "CONSUMADO").Count();

        DadosComparativosEntreTentativaEConsumado = new List<ChartSeries>()
        {
            new ChartSeries() 
            { Name = "Tentativa", 
              Data = new double[] 
              { 
                totalTentativaJaneiro,
                totalTentativaFevereiro,
                totalTentativaMarco,
                totalTentativaAbril,
                totalTentativaMaio, 
                totalTentativaJunho,
                totalTentativaJulho,
                totalTentativaAgosto,
                totalTentativaSetembro, 
                totalTentativaOutubro,
                totalTentativaNovembro, 
                totalTentativaDezembro
              }
            },
            new ChartSeries() 
            { Name = "Consumado", 
              Data = new double[]
              {
                totalConsumadoJaneiro,
                totalConsumadoFevereiro,
                totalConsumadoMarco,
                totalConsumadoAbril,
                totalConsumadoMaio, 
                totalConsumadoJunho,
                totalConsumadoJulho,
                totalConsumadoAgosto,
                totalConsumadoSetembro, 
                totalConsumadoOutubro,
                totalConsumadoNovembro, 
                totalConsumadoDezembro  
              }
            }
        };
    }

    // Gráfico3;
    private void GerarGraficoStatusRegistro()
    {
        var totalConsistido = registros.Where(x => x.StatusRegistro == true).Count();
        var totalNaoConsistido = registros.Where(x => x.StatusRegistro == false).Count();
        DadosComparativoStatusRegistro = new double[] { totalConsistido, totalNaoConsistido };
    }
    public string[] labelGraficoStatusRegistro = { "Consistido", "Não Consistido" };
}